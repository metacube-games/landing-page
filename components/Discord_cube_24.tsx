/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 --types discord_cube_24.glb
*/

import * as THREE from 'three'
import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame, useThree } from "@react-three/fiber";


type GLTFResult = GLTF & {
  nodes: {
    Plane: THREE.Mesh
  }
  materials: {
    ['Free Block Material']: THREE.MeshStandardMaterial
  }
}

export function ModelDiscord(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/discord_cube_24.glb') as GLTFResult
  const ref = useRef<THREE.Mesh>(null!);
  const levitationAmplitude = 0.5;

  useFrame((state) => {
    const time = state.clock.getElapsedTime();
    ref.current.rotation.z = Math.sin(time) * levitationAmplitude;
  })

  return (
    <group {...props} dispose={null}>
      <mesh ref={ref} geometry={nodes.Plane.geometry} material={materials['Free Block Material']} position={[0, 0, 1.5]} rotation={[1, 0, 0]} />
    </group>
  )
}

useGLTF.preload('discord_cube_24.glb')
